apiVersion: v1
kind: Namespace
metadata:
  name: kuma-demo
  namespace: kuma-demo
  labels:
    kuma.io/sidecar-injection: enabled
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch
  namespace: kuma-demo
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  namespace: kuma-demo
  labels:
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  namespace: kuma-demo
  labels:
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100M
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        app: "elasticsearch-master"
      annotations:
    spec:
      terminationGracePeriodSeconds: 120
      volumes:
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "kvn0218/new-elastic"
        imagePullPolicy: "Always"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}
      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        image: "kvn0218/new-elastic"
        imagePullPolicy: "Always"
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=yellow&timeout=1s' )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                http () {
                    local path="${1}"
                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    else
                      BASIC_AUTH=''
                    fi
                    curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
                }

                if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy and there are master nodes available'
                    http "/_cluster/health?timeout=0s"
                else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=yellow&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=yellow&timeout=1s" ; then
                        touch ${START_FILE}
                        exit 0
                    else
                        echo 'Cluster is not yet ready (request params: "wait_for_status=yellow&timeout=1s" )'
                        exit 1
                    fi
                fi
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 512M
          requests:
            cpu: 100m
            memory: 512M
        env:
          - name: KUBERNETES_CA_CERTIFICATE_FILE
            value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ES_JAVA_OPTS
            value: "-Xmx128m -Xms128m"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: kuma-demo
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: kvn0218/kuma-redis
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 256Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kuma-demo
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: kuma-demo
  annotations:
    3001.service.kuma.io/protocol: "http"
spec:
  selector:
    app: kuma-demo-backend
  ports:
  - name: api
    port: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-demo-backend-v0
  namespace: kuma-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kuma-demo-backend
      version: v0
      env: prod
  template:
    metadata:
      labels:
        app: kuma-demo-backend
        version: v0
        env: prod
    spec:
      containers:
      - image: kvn0218/kuma-demo-be:v4
        name: kuma-be
        env:
        - name: ES_HOST
          value: http://elasticsearch-master:80
        - name: ES_SPECIAL_OFFER
          value: "false"
        - name: REDIS_HOST
          value: redis
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-demo-backend-v1
  namespace: kuma-demo
spec:
  replicas: 0
  selector:
    matchLabels:
      app: kuma-demo-backend
      version: v1
      env: intg
  template:
    metadata:
      labels:
        app: kuma-demo-backend
        version: v1
        env: intg
    spec:
      containers:
      - image: kvn0218/kuma-demo-be:v4
        name: kuma-be
        env:
        - name: ES_HOST
          value: http://elasticsearch-master:80
        - name: REDIS_HOST
          value: redis
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-demo-backend-v2
  namespace: kuma-demo
spec:
  replicas: 0
  selector:
    matchLabels:
      app: kuma-demo-backend
      version: v2
      env: dev
  template:
    metadata:
      labels:
        app: kuma-demo-backend
        version: v2
        env: dev
    spec:
      containers:
      - image: kvn0218/kuma-demo-be:v4
        name: kuma-be
        env:
        - name: ES_HOST
          value: http://elasticsearch-master:80
        - name: ES_TOTAL_OFFER
          value: "2"
        - name: REDIS_HOST
          value: redis
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: kuma-demo
  annotations:
    80.service.kuma.io/protocol: "http"
    ingress.kubernetes.io/service-upstream: "true"
spec:
  selector:
    app: kuma-demo-frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-demo-app
  namespace: kuma-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kuma-demo-frontend
      version: v8
      env: prod
  template:
    metadata:
      labels:
        app: kuma-demo-frontend
        version: v8
        env: prod
    spec:
      containers:
      - name: kuma-fe
        image: kvn0218/kuma-demo-fe:http-server
        args: ["-P", "http://backend:3001"]
        imagePullPolicy: IfNotPresent
